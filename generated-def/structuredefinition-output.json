{
    "swagger": "2.0",
    "definitions": {
        "StructureDefinition": {
            "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
            "properties": {
                "resourceType": {
                    "description": "This is a StructureDefinition resource",
                    "type": "string"
                },
                "id": {
                    "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
                    "$ref": "#/definitions/id"
                },
                "meta": {
                    "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
                    "$ref": "#/definitions/Meta"
                },
                "implicitRules": {
                    "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
                    "$ref": "#/definitions/uri"
                },
                "language": {
                    "description": "The base language in which the resource is written.",
                    "$ref": "#/definitions/code"
                },
                "text": {
                    "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
                    "$ref": "#/definitions/Narrative"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "url": {
                    "description": "An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.",
                    "$ref": "#/definitions/uri"
                },
                "identifier": {
                    "description": "A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.",
                    "items": {
                        "$ref": "#/definitions/Identifier"
                    },
                    "type": "array"
                },
                "version": {
                    "description": "The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
                    "$ref": "#/definitions/string"
                },
                "name": {
                    "description": "A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
                    "$ref": "#/definitions/string"
                },
                "title": {
                    "description": "A short, descriptive, user-friendly title for the structure definition.",
                    "$ref": "#/definitions/string"
                },
                "status": {
                    "description": "The status of this structure definition. Enables tracking the life-cycle of the content.",
                    "enum": [
                        "draft",
                        "active",
                        "retired",
                        "unknown"
                    ]
                },
                "experimental": {
                    "description": "A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
                    "$ref": "#/definitions/boolean"
                },
                "date": {
                    "description": "The date  (and optionally time) when the structure definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.",
                    "$ref": "#/definitions/dateTime"
                },
                "publisher": {
                    "description": "The name of the organization or individual that published the structure definition.",
                    "$ref": "#/definitions/string"
                },
                "contact": {
                    "description": "Contact details to assist a user in finding and communicating with the publisher.",
                    "items": {
                        "$ref": "#/definitions/ContactDetail"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "A free text natural language description of the structure definition from a consumer's perspective.",
                    "$ref": "#/definitions/markdown"
                },
                "useContext": {
                    "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.",
                    "items": {
                        "$ref": "#/definitions/UsageContext"
                    },
                    "type": "array"
                },
                "jurisdiction": {
                    "description": "A legal or geographic region in which the structure definition is intended to be used.",
                    "items": {
                        "$ref": "#/definitions/CodeableConcept"
                    },
                    "type": "array"
                },
                "purpose": {
                    "description": "Explanation of why this structure definition is needed and why it has been designed as it has.",
                    "$ref": "#/definitions/markdown"
                },
                "copyright": {
                    "description": "A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.",
                    "$ref": "#/definitions/markdown"
                },
                "keyword": {
                    "description": "A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.",
                    "items": {
                        "$ref": "#/definitions/Coding"
                    },
                    "type": "array"
                },
                "fhirVersion": {
                    "description": "The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.0. for this version.",
                    "enum": [
                        "0.01",
                        "0.05",
                        "0.06",
                        "0.11",
                        "0.0.80",
                        "0.0.81",
                        "0.0.82",
                        "0.4.0",
                        "0.5.0",
                        "1.0.0",
                        "1.0.1",
                        "1.0.2",
                        "1.1.0",
                        "1.4.0",
                        "1.6.0",
                        "1.8.0",
                        "3.0.0",
                        "3.0.1",
                        "3.3.0",
                        "3.5.0",
                        "4.0.0"
                    ]
                },
                "mapping": {
                    "description": "An external specification that the content is mapped to.",
                    "items": {
                        "$ref": "#/definitions/StructureDefinition_Mapping"
                    },
                    "type": "array"
                },
                "kind": {
                    "description": "Defines the kind of structure that this definition is describing.",
                    "enum": [
                        "primitive-type",
                        "complex-type",
                        "resource",
                        "logical"
                    ]
                },
                "abstract": {
                    "description": "Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.",
                    "$ref": "#/definitions/boolean"
                },
                "context": {
                    "description": "Identifies the types of resource or data type elements to which the extension can be applied.",
                    "items": {
                        "$ref": "#/definitions/StructureDefinition_Context"
                    },
                    "type": "array"
                },
                "contextInvariant": {
                    "description": "A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.",
                    "items": {
                        "$ref": "#/definitions/string"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
                    "$ref": "#/definitions/uri"
                },
                "baseDefinition": {
                    "description": "An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.",
                    "$ref": "#/definitions/canonical"
                },
                "derivation": {
                    "description": "How the type relates to the baseDefinition.",
                    "enum": [
                        "specialization",
                        "constraint"
                    ]
                },
                "snapshot": {
                    "description": "A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.",
                    "$ref": "#/definitions/StructureDefinition_Snapshot"
                },
                "differential": {
                    "description": "A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.",
                    "$ref": "#/definitions/StructureDefinition_Differential"
                }
            },
            "additionalProperties": false,
            "required": [
                "resourceType"
            ]
        },
        "id": {
            "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
            "type": "string",
            "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
        },
        "Meta": {
            "description": "The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "versionId": {
                    "description": "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
                    "$ref": "#/definitions/id"
                },
                "lastUpdated": {
                    "description": "When the resource last changed - e.g. when the version changed.",
                    "$ref": "#/definitions/instant"
                },
                "source": {
                    "description": "A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
                    "$ref": "#/definitions/uri"
                },
                "profile": {
                    "description": "A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].",
                    "items": {
                        "$ref": "#/definitions/canonical"
                    },
                    "type": "array"
                },
                "security": {
                    "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
                    "items": {
                        "$ref": "#/definitions/Coding"
                    },
                    "type": "array"
                },
                "tag": {
                    "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
                    "items": {
                        "$ref": "#/definitions/Coding"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false
        },
        "uri": {
            "pattern": "^\\S*$",
            "type": "string",
            "description": "String of characters used to identify a name or a resource"
        },
        "code": {
            "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
            "type": "string",
            "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
        },
        "Narrative": {
            "description": "A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
                    "enum": [
                        "generated",
                        "extensions",
                        "additional",
                        "empty"
                    ]
                },
                "div": {
                    "description": "The actual narrative content, a stripped down version of XHTML.",
                    "$ref": "#/definitions/xhtml"
                }
            },
            "additionalProperties": false,
            "required": [
                "div"
            ]
        },
        "Extension": {
            "description": "Optional Extension Element - found in all resources.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "url": {
                    "description": "Source of the definition for the extension code - a logical name or a URL.",
                    "$ref": "#/definitions/uri"
                },
                "valueBase64Binary": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                    "type": "string"
                },
                "valueBoolean": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^true|false$",
                    "type": "boolean"
                },
                "valueCanonical": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "valueCode": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                },
                "valueDate": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "valueDateTime": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "valueDecimal": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                },
                "valueId": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                    "type": "string"
                },
                "valueInstant": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                },
                "valueInteger": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                },
                "valueMarkdown": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "valueOid": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                    "type": "string"
                },
                "valuePositiveInt": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                },
                "valueString": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "valueTime": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                    "type": "string"
                },
                "valueUnsignedInt": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                },
                "valueUri": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "valueUrl": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "valueUuid": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "type": "string"
                },
                "valueAddress": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueAge": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueAnnotation": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueAttachment": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueCodeableConcept": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "valueCoding": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "$ref": "#/definitions/Coding"
                },
                "valueContactPoint": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueCount": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueDistance": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueDuration": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueHumanName": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueIdentifier": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "$ref": "#/definitions/Identifier"
                },
                "valueMoney": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valuePeriod": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueQuantity": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueRange": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueRatio": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueReference": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueSampledData": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueSignature": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueTiming": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueContactDetail": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "$ref": "#/definitions/ContactDetail"
                },
                "valueContributor": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueDataRequirement": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueExpression": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueParameterDefinition": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueRelatedArtifact": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueTriggerDefinition": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                },
                "valueUsageContext": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "$ref": "#/definitions/UsageContext"
                },
                "valueDosage": {
                    "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "Identifier": {
            "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "use": {
                    "description": "The purpose of this identifier.",
                    "enum": [
                        "usual",
                        "official",
                        "temp",
                        "secondary",
                        "old"
                    ]
                },
                "type": {
                    "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "system": {
                    "description": "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                    "$ref": "#/definitions/uri"
                },
                "value": {
                    "description": "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
                    "$ref": "#/definitions/string"
                },
                "period": {
                    "description": "Time period during which identifier is/was valid for use.",
                    "$ref": "#/definitions/Period"
                },
                "assigner": {
                    "description": "Organization that issued/manages the identifier.",
                    "$ref": "#/definitions/Reference"
                }
            },
            "additionalProperties": false
        },
        "string": {
            "pattern": "^[ \\r\\n\\t\\S]+$",
            "type": "string",
            "description": "A sequence of Unicode characters"
        },
        "boolean": {
            "pattern": "^true|false$",
            "type": "boolean",
            "description": "Value of \"true\" or \"false\""
        },
        "dateTime": {
            "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
            "type": "string",
            "description": "A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates."
        },
        "ContactDetail": {
            "description": "Specifies contact information for a person or organization.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The name of an individual to contact.",
                    "$ref": "#/definitions/string"
                },
                "telecom": {
                    "description": "The contact details for the individual (if a name was provided) or the organization.",
                    "items": {
                        "$ref": "#/definitions/ContactPoint"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false
        },
        "markdown": {
            "pattern": "^[ \\r\\n\\t\\S]+$",
            "type": "string",
            "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
        },
        "UsageContext": {
            "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "code": {
                    "description": "A code that identifies the type of context being specified by this usage context.",
                    "$ref": "#/definitions/Coding"
                },
                "valueCodeableConcept": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "valueQuantity": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "$ref": "#/definitions/Quantity"
                },
                "valueRange": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "$ref": "#/definitions/Range"
                },
                "valueReference": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "$ref": "#/definitions/Reference"
                }
            },
            "additionalProperties": false,
            "required": [
                "code"
            ]
        },
        "CodeableConcept": {
            "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "coding": {
                    "description": "A reference to a code defined by a terminology system.",
                    "items": {
                        "$ref": "#/definitions/Coding"
                    },
                    "type": "array"
                },
                "text": {
                    "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
                    "$ref": "#/definitions/string"
                }
            },
            "additionalProperties": false
        },
        "Coding": {
            "description": "A reference to a code defined by a terminology system.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "system": {
                    "description": "The identification of the code system that defines the meaning of the symbol in the code.",
                    "$ref": "#/definitions/uri"
                },
                "version": {
                    "description": "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
                    "$ref": "#/definitions/string"
                },
                "code": {
                    "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
                    "$ref": "#/definitions/code"
                },
                "display": {
                    "description": "A representation of the meaning of the code in the system, following the rules of the system.",
                    "$ref": "#/definitions/string"
                },
                "userSelected": {
                    "description": "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
                    "$ref": "#/definitions/boolean"
                }
            },
            "additionalProperties": false
        },
        "StructureDefinition_Mapping": {
            "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "identity": {
                    "description": "An Internal id that is used to identify this mapping set when specific mappings are made.",
                    "$ref": "#/definitions/id"
                },
                "uri": {
                    "description": "An absolute URI that identifies the specification that this mapping is expressed to.",
                    "$ref": "#/definitions/uri"
                },
                "name": {
                    "description": "A name for the specification that is being mapped to.",
                    "$ref": "#/definitions/string"
                },
                "comment": {
                    "description": "Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.",
                    "$ref": "#/definitions/string"
                }
            },
            "additionalProperties": false
        },
        "StructureDefinition_Context": {
            "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Defines how to interpret the expression that defines what the context of the extension is.",
                    "enum": [
                        "fhirpath",
                        "element",
                        "extension"
                    ]
                },
                "expression": {
                    "description": "An expression that defines where an extension can be used in resources.",
                    "$ref": "#/definitions/string"
                }
            },
            "additionalProperties": false
        },
        "canonical": {
            "pattern": "^\\S*$",
            "type": "string",
            "description": "A URI that is a reference to a canonical URL on a FHIR resource"
        },
        "StructureDefinition_Snapshot": {
            "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "element": {
                    "description": "Captures constraints on each element within the resource.",
                    "items": {
                        "$ref": "#/definitions/ElementDefinition"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false,
            "required": [
                "element"
            ]
        },
        "StructureDefinition_Differential": {
            "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "element": {
                    "description": "Captures constraints on each element within the resource.",
                    "items": {
                        "$ref": "#/definitions/ElementDefinition"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false,
            "required": [
                "element"
            ]
        },
        "OperationOutcome": {
            "description": "A collection of error, warning, or information messages that result from a system action.",
            "properties": {
                "resourceType": {
                    "description": "This is a OperationOutcome resource",
                    "type": "string"
                },
                "issue": {
                    "description": "An error, warning, or information message that results from a system action.",
                    "items": {
                        "description": "A collection of error, warning, or information messages that result from a system action.",
                        "properties": {
                            "id": {
                                "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                                "$ref": "#/definitions/string"
                            },
                            "severity": {
                                "description": "Indicates whether the issue indicates a variation from successful processing.",
                                "enum": [
                                    "fatal",
                                    "error",
                                    "warning",
                                    "information"
                                ]
                            },
                            "code": {
                                "description": "Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.",
                                "enum": [
                                    "invalid",
                                    "structure",
                                    "required",
                                    "value",
                                    "invariant",
                                    "security",
                                    "login",
                                    "unknown",
                                    "expired",
                                    "forbidden",
                                    "suppressed",
                                    "processing",
                                    "not-supported",
                                    "duplicate",
                                    "multiple-matches",
                                    "not-found",
                                    "deleted",
                                    "too-long",
                                    "code-invalid",
                                    "extension",
                                    "too-costly",
                                    "business-rule",
                                    "conflict",
                                    "transient",
                                    "lock-error",
                                    "no-store",
                                    "exception",
                                    "timeout",
                                    "incomplete",
                                    "throttled",
                                    "informational"
                                ]
                            },
                            "details": {
                                "description": "Additional details about the error. This may be a text description of the error or a system code that identifies the error.",
                                "$ref": "#/definitions/CodeableConcept"
                            },
                            "diagnostics": {
                                "description": "Additional diagnostic information about the issue.",
                                "$ref": "#/definitions/string"
                            },
                            "location": {
                                "description": "This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse. \n\nFor resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be \"http.\" + the parameter name.",
                                "items": {
                                    "$ref": "#/definitions/string"
                                },
                                "type": "array"
                            },
                            "expression": {
                                "description": "A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.",
                                "items": {
                                    "$ref": "#/definitions/string"
                                },
                                "type": "array"
                            }
                        },
                        "additionalProperties": false
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false,
            "required": [
                "issue",
                "resourceType"
            ]
        },
        "Bundle": {
            "description": "A container for a collection of resources.",
            "properties": {
                "resourceType": {
                    "description": "This is a Bundle resource",
                    "type": "string"
                },
                "identifier": {
                    "description": "A persistent identifier for the bundle that won't change as a bundle is copied from server to server.",
                    "$ref": "#/definitions/Identifier"
                },
                "type": {
                    "description": "Indicates the purpose of this bundle - how it is intended to be used.",
                    "enum": [
                        "document",
                        "message",
                        "transaction",
                        "transaction-response",
                        "batch",
                        "batch-response",
                        "history",
                        "searchset",
                        "collection"
                    ]
                },
                "timestamp": {
                    "description": "The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.",
                    "$ref": "#/definitions/instant"
                },
                "total": {
                    "description": "If a set of search matches, this is the total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle.",
                    "$ref": "#/definitions/unsignedInt"
                },
                "link": {
                    "description": "A series of links that provide context to this bundle.",
                    "items": {
                        "description": "A container for a collection of resources.",
                        "properties": {
                            "id": {
                                "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                                "$ref": "#/definitions/string"
                            },
                            "relation": {
                                "description": "A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).",
                                "$ref": "#/definitions/string"
                            },
                            "url": {
                                "description": "The reference details for the link.",
                                "$ref": "#/definitions/uri"
                            }
                        },
                        "additionalProperties": false
                    },
                    "type": "array"
                },
                "entry": {
                    "description": "An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).",
                    "items": {
                        "description": "A container for a collection of resources.",
                        "properties": {
                            "id": {
                                "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                                "$ref": "#/definitions/string"
                            },
                            "link": {
                                "description": "A series of links that provide context to this entry.",
                                "items": {
                                    "description": "A container for a collection of resources.",
                                    "properties": {
                                        "id": {
                                            "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                                            "$ref": "#/definitions/string"
                                        },
                                        "relation": {
                                            "description": "A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).",
                                            "$ref": "#/definitions/string"
                                        },
                                        "url": {
                                            "description": "The reference details for the link.",
                                            "$ref": "#/definitions/uri"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "type": "array"
                            },
                            "fullUrl": {
                                "description": "The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that: \n* fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)\n* Results from operations might involve resources that are not identified.",
                                "$ref": "#/definitions/uri"
                            },
                            "resource": {
                                "description": "The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type.",
                                "$ref": "#/definitions/Resource"
                            },
                            "search": {
                                "description": "Information about the search process that lead to the creation of this entry.",
                                "properties": {
                                    "id": {
                                        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                                        "$ref": "#/definitions/string"
                                    },
                                    "mode": {
                                        "description": "Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.",
                                        "enum": [
                                            "match",
                                            "include",
                                            "outcome"
                                        ]
                                    },
                                    "score": {
                                        "description": "When searching, the server's search ranking score for the entry.",
                                        "$ref": "#/definitions/decimal"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "request": {
                                "description": "Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.",
                                "properties": {
                                    "id": {
                                        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                                        "$ref": "#/definitions/string"
                                    },
                                    "method": {
                                        "description": "In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.",
                                        "enum": [
                                            "GET",
                                            "HEAD",
                                            "POST",
                                            "PUT",
                                            "DELETE",
                                            "PATCH"
                                        ]
                                    },
                                    "url": {
                                        "description": "The URL for this entry, relative to the root (the address to which the request is posted).",
                                        "$ref": "#/definitions/uri"
                                    },
                                    "ifNoneMatch": {
                                        "description": "If the ETag values match, return a 304 Not Modified status. See the API documentation for [\"Conditional Read\"](http.html#cread).",
                                        "$ref": "#/definitions/string"
                                    },
                                    "ifModifiedSince": {
                                        "description": "Only perform the operation if the last updated date matches. See the API documentation for [\"Conditional Read\"](http.html#cread).",
                                        "$ref": "#/definitions/instant"
                                    },
                                    "ifMatch": {
                                        "description": "Only perform the operation if the Etag value matches. For more information, see the API section [\"Managing Resource Contention\"](http.html#concurrency).",
                                        "$ref": "#/definitions/string"
                                    },
                                    "ifNoneExist": {
                                        "description": "Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for [\"Conditional Create\"](http.html#ccreate). This is just the query portion of the URL - what follows the \"?\" (not including the \"?\").",
                                        "$ref": "#/definitions/string"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "response": {
                                "description": "Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.",
                                "properties": {
                                    "id": {
                                        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                                        "$ref": "#/definitions/string"
                                    },
                                    "status": {
                                        "description": "The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.",
                                        "$ref": "#/definitions/string"
                                    },
                                    "location": {
                                        "description": "The location header created by processing this operation, populated if the operation returns a location.",
                                        "$ref": "#/definitions/uri"
                                    },
                                    "etag": {
                                        "description": "The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).",
                                        "$ref": "#/definitions/string"
                                    },
                                    "lastModified": {
                                        "description": "The date/time that the resource was modified on the server.",
                                        "$ref": "#/definitions/instant"
                                    },
                                    "outcome": {
                                        "description": "An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.",
                                        "$ref": "#/definitions/Resource"
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    },
                    "type": "array"
                },
                "signature": {
                    "description": "Digital Signature - base64 encoded. XML-DSig or a JWT.",
                    "$ref": "#/definitions/Signature"
                }
            },
            "additionalProperties": false,
            "required": [
                "resourceType"
            ]
        },
        "unsignedInt": {
            "pattern": "^[0]|([1-9][0-9]*)$",
            "type": "number",
            "description": "An integer with a value that is not negative (e.g. >= 0)"
        },
        "Resource": {
            "properties": {
                "resourceType": {
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/id"
                },
                "meta": {
                    "$ref": "#/definitions/Meta"
                },
                "implicitRules": {
                    "$ref": "#/definitions/uri"
                },
                "language": {
                    "$ref": "#/definitions/code"
                }
            }
        },
        "Signature": {
            "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.",
                    "items": {
                        "$ref": "#/definitions/Coding"
                    },
                    "type": "array"
                },
                "when": {
                    "description": "When the digital signature was signed.",
                    "$ref": "#/definitions/instant"
                },
                "who": {
                    "description": "A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).",
                    "$ref": "#/definitions/Reference"
                },
                "onBehalfOf": {
                    "description": "A reference to an application-usable description of the identity that is represented by the signature.",
                    "$ref": "#/definitions/Reference"
                },
                "targetFormat": {
                    "description": "A mime type that indicates the technical format of the target resources signed by the signature.",
                    "$ref": "#/definitions/code"
                },
                "sigFormat": {
                    "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.",
                    "$ref": "#/definitions/code"
                },
                "data": {
                    "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.",
                    "$ref": "#/definitions/base64Binary"
                }
            },
            "additionalProperties": false,
            "required": [
                "type",
                "who"
            ]
        },
        "base64Binary": {
            "type": "string",
            "description": "A stream of bytes"
        },
        "decimal": {
            "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
            "type": "number",
            "description": "A rational number with implicit precision"
        },
        "instant": {
            "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
            "type": "string",
            "description": "An instant in time - known at least to the second"
        },
        "xhtml": {
            "description": "xhtml - escaped html (see specfication)",
            "type": "string"
        },
        "Period": {
            "description": "A time period defined by a start and end date and optionally time.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "start": {
                    "description": "The start of the period. The boundary is inclusive.",
                    "$ref": "#/definitions/dateTime"
                },
                "end": {
                    "description": "The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
                    "$ref": "#/definitions/dateTime"
                }
            },
            "additionalProperties": false
        },
        "Reference": {
            "description": "A reference from one resource to another.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "reference": {
                    "description": "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
                    "$ref": "#/definitions/string"
                },
                "type": {
                    "description": "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.\n\nThe type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
                    "$ref": "#/definitions/uri"
                },
                "identifier": {
                    "description": "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
                    "$ref": "#/definitions/Identifier"
                },
                "display": {
                    "description": "Plain text narrative that identifies the resource in addition to the resource reference.",
                    "$ref": "#/definitions/string"
                }
            },
            "additionalProperties": false
        },
        "ContactPoint": {
            "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "system": {
                    "description": "Telecommunications form for contact point - what communications system is required to make use of the contact.",
                    "enum": [
                        "phone",
                        "fax",
                        "email",
                        "pager",
                        "url",
                        "sms",
                        "other"
                    ]
                },
                "value": {
                    "description": "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).",
                    "$ref": "#/definitions/string"
                },
                "use": {
                    "description": "Identifies the purpose for the contact point.",
                    "enum": [
                        "home",
                        "work",
                        "temp",
                        "old",
                        "mobile"
                    ]
                },
                "rank": {
                    "description": "Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.",
                    "$ref": "#/definitions/positiveInt"
                },
                "period": {
                    "description": "Time period when the contact point was/is in use.",
                    "$ref": "#/definitions/Period"
                }
            },
            "additionalProperties": false
        },
        "Quantity": {
            "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "$ref": "#/definitions/decimal"
                },
                "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                        "<",
                        "<=",
                        ">=",
                        ">"
                    ]
                },
                "unit": {
                    "description": "A human-readable form of the unit.",
                    "$ref": "#/definitions/string"
                },
                "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "$ref": "#/definitions/uri"
                },
                "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "$ref": "#/definitions/code"
                }
            },
            "additionalProperties": false
        },
        "Range": {
            "description": "A set of ordered Quantities defined by a low and high limit.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "low": {
                    "description": "The low limit. The boundary is inclusive.",
                    "$ref": "#/definitions/Quantity"
                },
                "high": {
                    "description": "The high limit. The boundary is inclusive.",
                    "$ref": "#/definitions/Quantity"
                }
            },
            "additionalProperties": false
        },
        "ElementDefinition": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
                    "$ref": "#/definitions/string"
                },
                "representation": {
                    "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
                    "items": {
                        "enum": [
                            "xmlAttr",
                            "xmlText",
                            "typeAttr",
                            "cdaText",
                            "xhtml"
                        ]
                    },
                    "type": "array"
                },
                "sliceName": {
                    "description": "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
                    "$ref": "#/definitions/string"
                },
                "sliceIsConstraining": {
                    "description": "If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.",
                    "$ref": "#/definitions/boolean"
                },
                "label": {
                    "description": "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
                    "$ref": "#/definitions/string"
                },
                "code": {
                    "description": "A code that has the same meaning as the element in a particular terminology.",
                    "items": {
                        "$ref": "#/definitions/Coding"
                    },
                    "type": "array"
                },
                "slicing": {
                    "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
                    "$ref": "#/definitions/ElementDefinition_Slicing"
                },
                "short": {
                    "description": "A concise description of what this element means (e.g. for use in autogenerated summaries).",
                    "$ref": "#/definitions/string"
                },
                "definition": {
                    "description": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).",
                    "$ref": "#/definitions/markdown"
                },
                "comment": {
                    "description": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).",
                    "$ref": "#/definitions/markdown"
                },
                "requirements": {
                    "description": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
                    "$ref": "#/definitions/markdown"
                },
                "alias": {
                    "description": "Identifies additional names by which this element might also be known.",
                    "items": {
                        "$ref": "#/definitions/string"
                    },
                    "type": "array"
                },
                "min": {
                    "description": "The minimum number of times this element SHALL appear in the instance.",
                    "$ref": "#/definitions/unsignedInt"
                },
                "max": {
                    "description": "The maximum number of times this element is permitted to appear in the instance.",
                    "$ref": "#/definitions/string"
                },
                "base": {
                    "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.",
                    "$ref": "#/definitions/ElementDefinition_Base"
                },
                "contentReference": {
                    "description": "Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.",
                    "$ref": "#/definitions/uri"
                },
                "type": {
                    "description": "The data type or resource that the value of this element is permitted to be.",
                    "items": {
                        "$ref": "#/definitions/ElementDefinition_Type"
                    },
                    "type": "array"
                },
                "defaultValueBase64Binary": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                    "type": "string"
                },
                "defaultValueBoolean": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^true|false$",
                    "type": "boolean"
                },
                "defaultValueCanonical": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "defaultValueCode": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                },
                "defaultValueDate": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "defaultValueDateTime": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "defaultValueDecimal": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                },
                "defaultValueId": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                    "type": "string"
                },
                "defaultValueInstant": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                },
                "defaultValueInteger": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                },
                "defaultValueMarkdown": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "defaultValueOid": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                    "type": "string"
                },
                "defaultValuePositiveInt": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                },
                "defaultValueString": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "defaultValueTime": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                    "type": "string"
                },
                "defaultValueUnsignedInt": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                },
                "defaultValueUri": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "defaultValueUrl": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "defaultValueUuid": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "type": "string"
                },
                "defaultValueAddress": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Address"
                },
                "defaultValueAge": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Age"
                },
                "defaultValueAnnotation": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Annotation"
                },
                "defaultValueAttachment": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Attachment"
                },
                "defaultValueCodeableConcept": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "defaultValueCoding": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Coding"
                },
                "defaultValueContactPoint": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/ContactPoint"
                },
                "defaultValueCount": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Count"
                },
                "defaultValueDistance": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Distance"
                },
                "defaultValueDuration": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Duration"
                },
                "defaultValueHumanName": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/HumanName"
                },
                "defaultValueIdentifier": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Identifier"
                },
                "defaultValueMoney": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Money"
                },
                "defaultValuePeriod": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Period"
                },
                "defaultValueQuantity": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Quantity"
                },
                "defaultValueRange": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Range"
                },
                "defaultValueRatio": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Ratio"
                },
                "defaultValueReference": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Reference"
                },
                "defaultValueSampledData": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/SampledData"
                },
                "defaultValueSignature": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Signature"
                },
                "defaultValueTiming": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Timing"
                },
                "defaultValueContactDetail": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/ContactDetail"
                },
                "defaultValueContributor": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Contributor"
                },
                "defaultValueDataRequirement": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/DataRequirement"
                },
                "defaultValueExpression": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Expression"
                },
                "defaultValueParameterDefinition": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/ParameterDefinition"
                },
                "defaultValueRelatedArtifact": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/RelatedArtifact"
                },
                "defaultValueTriggerDefinition": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/TriggerDefinition"
                },
                "defaultValueUsageContext": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/UsageContext"
                },
                "defaultValueDosage": {
                    "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                    "$ref": "#/definitions/Dosage"
                },
                "meaningWhenMissing": {
                    "description": "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').",
                    "$ref": "#/definitions/markdown"
                },
                "orderMeaning": {
                    "description": "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.",
                    "$ref": "#/definitions/string"
                },
                "fixedBase64Binary": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                    "type": "string"
                },
                "fixedBoolean": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^true|false$",
                    "type": "boolean"
                },
                "fixedCanonical": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "fixedCode": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                },
                "fixedDate": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "fixedDateTime": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "fixedDecimal": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                },
                "fixedId": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                    "type": "string"
                },
                "fixedInstant": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                },
                "fixedInteger": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                },
                "fixedMarkdown": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "fixedOid": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                    "type": "string"
                },
                "fixedPositiveInt": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                },
                "fixedString": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "fixedTime": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                    "type": "string"
                },
                "fixedUnsignedInt": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                },
                "fixedUri": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "fixedUrl": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "fixedUuid": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "type": "string"
                },
                "fixedAddress": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Address"
                },
                "fixedAge": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Age"
                },
                "fixedAnnotation": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Annotation"
                },
                "fixedAttachment": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Attachment"
                },
                "fixedCodeableConcept": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "fixedCoding": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Coding"
                },
                "fixedContactPoint": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/ContactPoint"
                },
                "fixedCount": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Count"
                },
                "fixedDistance": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Distance"
                },
                "fixedDuration": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Duration"
                },
                "fixedHumanName": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/HumanName"
                },
                "fixedIdentifier": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Identifier"
                },
                "fixedMoney": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Money"
                },
                "fixedPeriod": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Period"
                },
                "fixedQuantity": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Quantity"
                },
                "fixedRange": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Range"
                },
                "fixedRatio": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Ratio"
                },
                "fixedReference": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Reference"
                },
                "fixedSampledData": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/SampledData"
                },
                "fixedSignature": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Signature"
                },
                "fixedTiming": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Timing"
                },
                "fixedContactDetail": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/ContactDetail"
                },
                "fixedContributor": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Contributor"
                },
                "fixedDataRequirement": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/DataRequirement"
                },
                "fixedExpression": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Expression"
                },
                "fixedParameterDefinition": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/ParameterDefinition"
                },
                "fixedRelatedArtifact": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/RelatedArtifact"
                },
                "fixedTriggerDefinition": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/TriggerDefinition"
                },
                "fixedUsageContext": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/UsageContext"
                },
                "fixedDosage": {
                    "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                    "$ref": "#/definitions/Dosage"
                },
                "patternBase64Binary": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                    "type": "string"
                },
                "patternBoolean": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^true|false$",
                    "type": "boolean"
                },
                "patternCanonical": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "patternCode": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                },
                "patternDate": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "patternDateTime": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "patternDecimal": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                },
                "patternId": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                    "type": "string"
                },
                "patternInstant": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                },
                "patternInteger": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                },
                "patternMarkdown": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "patternOid": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                    "type": "string"
                },
                "patternPositiveInt": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                },
                "patternString": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "patternTime": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                    "type": "string"
                },
                "patternUnsignedInt": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                },
                "patternUri": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "patternUrl": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "patternUuid": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "type": "string"
                },
                "patternAddress": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Address"
                },
                "patternAge": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Age"
                },
                "patternAnnotation": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Annotation"
                },
                "patternAttachment": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Attachment"
                },
                "patternCodeableConcept": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "patternCoding": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Coding"
                },
                "patternContactPoint": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/ContactPoint"
                },
                "patternCount": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Count"
                },
                "patternDistance": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Distance"
                },
                "patternDuration": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Duration"
                },
                "patternHumanName": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/HumanName"
                },
                "patternIdentifier": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Identifier"
                },
                "patternMoney": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Money"
                },
                "patternPeriod": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Period"
                },
                "patternQuantity": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Quantity"
                },
                "patternRange": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Range"
                },
                "patternRatio": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Ratio"
                },
                "patternReference": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Reference"
                },
                "patternSampledData": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/SampledData"
                },
                "patternSignature": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Signature"
                },
                "patternTiming": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Timing"
                },
                "patternContactDetail": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/ContactDetail"
                },
                "patternContributor": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Contributor"
                },
                "patternDataRequirement": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/DataRequirement"
                },
                "patternExpression": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Expression"
                },
                "patternParameterDefinition": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/ParameterDefinition"
                },
                "patternRelatedArtifact": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/RelatedArtifact"
                },
                "patternTriggerDefinition": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/TriggerDefinition"
                },
                "patternUsageContext": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/UsageContext"
                },
                "patternDosage": {
                    "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                    "$ref": "#/definitions/Dosage"
                },
                "example": {
                    "description": "A sample value for this element demonstrating the type of information that would typically be found in the element.",
                    "items": {
                        "$ref": "#/definitions/ElementDefinition_Example"
                    },
                    "type": "array"
                },
                "minValueDate": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "minValueDateTime": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "minValueInstant": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                },
                "minValueTime": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                    "type": "string"
                },
                "minValueDecimal": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                },
                "minValueInteger": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                },
                "minValuePositiveInt": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                },
                "minValueUnsignedInt": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                },
                "minValueQuantity": {
                    "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "$ref": "#/definitions/Quantity"
                },
                "maxValueDate": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "maxValueDateTime": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "maxValueInstant": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                },
                "maxValueTime": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                    "type": "string"
                },
                "maxValueDecimal": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                },
                "maxValueInteger": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                },
                "maxValuePositiveInt": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                },
                "maxValueUnsignedInt": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                },
                "maxValueQuantity": {
                    "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                    "$ref": "#/definitions/Quantity"
                },
                "maxLength": {
                    "description": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
                    "$ref": "#/definitions/integer"
                },
                "condition": {
                    "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
                    "items": {
                        "$ref": "#/definitions/id"
                    },
                    "type": "array"
                },
                "constraint": {
                    "description": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
                    "items": {
                        "$ref": "#/definitions/ElementDefinition_Constraint"
                    },
                    "type": "array"
                },
                "mustSupport": {
                    "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.",
                    "$ref": "#/definitions/boolean"
                },
                "isModifier": {
                    "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
                    "$ref": "#/definitions/boolean"
                },
                "isModifierReason": {
                    "description": "Explains how that element affects the interpretation of the resource or element that contains it.",
                    "$ref": "#/definitions/string"
                },
                "isSummary": {
                    "description": "Whether the element should be included if a client requests a search with the parameter _summary=true.",
                    "$ref": "#/definitions/boolean"
                },
                "binding": {
                    "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
                    "$ref": "#/definitions/ElementDefinition_Binding"
                },
                "mapping": {
                    "description": "Identifies a concept from an external specification that roughly corresponds to this element.",
                    "items": {
                        "$ref": "#/definitions/ElementDefinition_Mapping"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false
        },
        "positiveInt": {
            "pattern": "^[1-9][0-9]*$",
            "type": "number",
            "description": "An integer with a value that is positive (e.g. >0)"
        },
        "ElementDefinition_Slicing": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "discriminator": {
                    "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
                    "items": {
                        "$ref": "#/definitions/ElementDefinition_Discriminator"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
                    "$ref": "#/definitions/string"
                },
                "ordered": {
                    "description": "If the matching elements have to occur in the same order as defined in the profile.",
                    "$ref": "#/definitions/boolean"
                },
                "rules": {
                    "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
                    "enum": [
                        "closed",
                        "open",
                        "openAtEnd"
                    ]
                }
            },
            "additionalProperties": false
        },
        "ElementDefinition_Base": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.",
                    "$ref": "#/definitions/string"
                },
                "min": {
                    "description": "Minimum cardinality of the base element identified by the path.",
                    "$ref": "#/definitions/unsignedInt"
                },
                "max": {
                    "description": "Maximum cardinality of the base element identified by the path.",
                    "$ref": "#/definitions/string"
                }
            },
            "additionalProperties": false
        },
        "ElementDefinition_Type": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "code": {
                    "description": "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
                    "$ref": "#/definitions/uri"
                },
                "profile": {
                    "description": "Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.",
                    "items": {
                        "$ref": "#/definitions/canonical"
                    },
                    "type": "array"
                },
                "targetProfile": {
                    "description": "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.",
                    "items": {
                        "$ref": "#/definitions/canonical"
                    },
                    "type": "array"
                },
                "aggregation": {
                    "description": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
                    "items": {
                        "enum": [
                            "contained",
                            "referenced",
                            "bundled"
                        ]
                    },
                    "type": "array"
                },
                "versioning": {
                    "description": "Whether this reference needs to be version specific or version independent, or whether either can be used.",
                    "enum": [
                        "either",
                        "independent",
                        "specific"
                    ]
                }
            },
            "additionalProperties": false
        },
        "Address": {
            "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "use": {
                    "description": "The purpose of this address.",
                    "enum": [
                        "home",
                        "work",
                        "temp",
                        "old",
                        "billing"
                    ]
                },
                "type": {
                    "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                    "enum": [
                        "postal",
                        "physical",
                        "both"
                    ]
                },
                "text": {
                    "description": "Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.",
                    "$ref": "#/definitions/string"
                },
                "line": {
                    "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.",
                    "items": {
                        "$ref": "#/definitions/string"
                    },
                    "type": "array"
                },
                "city": {
                    "description": "The name of the city, town, suburb, village or other community or delivery center.",
                    "$ref": "#/definitions/string"
                },
                "district": {
                    "description": "The name of the administrative area (county).",
                    "$ref": "#/definitions/string"
                },
                "state": {
                    "description": "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                    "$ref": "#/definitions/string"
                },
                "postalCode": {
                    "description": "A postal code designating a region defined by the postal service.",
                    "$ref": "#/definitions/string"
                },
                "country": {
                    "description": "Country - a nation as commonly understood or generally accepted.",
                    "$ref": "#/definitions/string"
                },
                "period": {
                    "description": "Time period when address was/is in use.",
                    "$ref": "#/definitions/Period"
                }
            },
            "additionalProperties": false
        },
        "Age": {
            "description": "A duration of time during which an organism (or a process) has existed.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "$ref": "#/definitions/decimal"
                },
                "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                        "<",
                        "<=",
                        ">=",
                        ">"
                    ]
                },
                "unit": {
                    "description": "A human-readable form of the unit.",
                    "$ref": "#/definitions/string"
                },
                "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "$ref": "#/definitions/uri"
                },
                "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "$ref": "#/definitions/code"
                }
            },
            "additionalProperties": false
        },
        "Annotation": {
            "description": "A  text note which also  contains information about who made the statement and when.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "authorReference": {
                    "description": "The individual responsible for making the annotation.",
                    "$ref": "#/definitions/Reference"
                },
                "authorString": {
                    "description": "The individual responsible for making the annotation.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "time": {
                    "description": "Indicates when this particular annotation was made.",
                    "$ref": "#/definitions/dateTime"
                },
                "text": {
                    "description": "The text of the annotation in markdown format.",
                    "$ref": "#/definitions/markdown"
                }
            },
            "additionalProperties": false
        },
        "Attachment": {
            "description": "For referring to data content defined in other formats.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "contentType": {
                    "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.",
                    "$ref": "#/definitions/code"
                },
                "language": {
                    "description": "The human language of the content. The value can be any valid value according to BCP 47.",
                    "$ref": "#/definitions/code"
                },
                "data": {
                    "description": "The actual data of the attachment - a sequence of bytes, base64 encoded.",
                    "$ref": "#/definitions/base64Binary"
                },
                "url": {
                    "description": "A location where the data can be accessed.",
                    "$ref": "#/definitions/url"
                },
                "size": {
                    "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done).",
                    "$ref": "#/definitions/unsignedInt"
                },
                "hash": {
                    "description": "The calculated hash of the data using SHA-1. Represented using base64.",
                    "$ref": "#/definitions/base64Binary"
                },
                "title": {
                    "description": "A label or set of text to display in place of the data.",
                    "$ref": "#/definitions/string"
                },
                "creation": {
                    "description": "The date that the attachment was first created.",
                    "$ref": "#/definitions/dateTime"
                }
            },
            "additionalProperties": false
        },
        "Count": {
            "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "$ref": "#/definitions/decimal"
                },
                "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                        "<",
                        "<=",
                        ">=",
                        ">"
                    ]
                },
                "unit": {
                    "description": "A human-readable form of the unit.",
                    "$ref": "#/definitions/string"
                },
                "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "$ref": "#/definitions/uri"
                },
                "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "$ref": "#/definitions/code"
                }
            },
            "additionalProperties": false
        },
        "Distance": {
            "description": "A length - a value with a unit that is a physical distance.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "$ref": "#/definitions/decimal"
                },
                "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                        "<",
                        "<=",
                        ">=",
                        ">"
                    ]
                },
                "unit": {
                    "description": "A human-readable form of the unit.",
                    "$ref": "#/definitions/string"
                },
                "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "$ref": "#/definitions/uri"
                },
                "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "$ref": "#/definitions/code"
                }
            },
            "additionalProperties": false
        },
        "Duration": {
            "description": "A length of time.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "$ref": "#/definitions/decimal"
                },
                "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                        "<",
                        "<=",
                        ">=",
                        ">"
                    ]
                },
                "unit": {
                    "description": "A human-readable form of the unit.",
                    "$ref": "#/definitions/string"
                },
                "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "$ref": "#/definitions/uri"
                },
                "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "$ref": "#/definitions/code"
                }
            },
            "additionalProperties": false
        },
        "HumanName": {
            "description": "A human's name with the ability to identify parts and usage.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "use": {
                    "description": "Identifies the purpose for this name.",
                    "enum": [
                        "usual",
                        "official",
                        "temp",
                        "nickname",
                        "anonymous",
                        "old",
                        "maiden"
                    ]
                },
                "text": {
                    "description": "Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.",
                    "$ref": "#/definitions/string"
                },
                "family": {
                    "description": "The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.",
                    "$ref": "#/definitions/string"
                },
                "given": {
                    "description": "Given name.",
                    "items": {
                        "$ref": "#/definitions/string"
                    },
                    "type": "array"
                },
                "prefix": {
                    "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                    "items": {
                        "$ref": "#/definitions/string"
                    },
                    "type": "array"
                },
                "suffix": {
                    "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                    "items": {
                        "$ref": "#/definitions/string"
                    },
                    "type": "array"
                },
                "period": {
                    "description": "Indicates the period of time when this name was valid for the named person.",
                    "$ref": "#/definitions/Period"
                }
            },
            "additionalProperties": false
        },
        "Money": {
            "description": "An amount of economic utility in some recognized currency.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "value": {
                    "description": "Numerical value (with implicit precision).",
                    "$ref": "#/definitions/decimal"
                },
                "currency": {
                    "description": "ISO 4217 Currency Code.",
                    "$ref": "#/definitions/code"
                }
            },
            "additionalProperties": false
        },
        "Ratio": {
            "description": "A relationship of two Quantity values - expressed as a numerator and a denominator.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "numerator": {
                    "description": "The value of the numerator.",
                    "$ref": "#/definitions/Quantity"
                },
                "denominator": {
                    "description": "The value of the denominator.",
                    "$ref": "#/definitions/Quantity"
                }
            },
            "additionalProperties": false
        },
        "SampledData": {
            "description": "A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "origin": {
                    "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.",
                    "$ref": "#/definitions/Quantity"
                },
                "period": {
                    "description": "The length of time between sampling times, measured in milliseconds.",
                    "$ref": "#/definitions/decimal"
                },
                "factor": {
                    "description": "A correction factor that is applied to the sampled data points before they are added to the origin.",
                    "$ref": "#/definitions/decimal"
                },
                "lowerLimit": {
                    "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).",
                    "$ref": "#/definitions/decimal"
                },
                "upperLimit": {
                    "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).",
                    "$ref": "#/definitions/decimal"
                },
                "dimensions": {
                    "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.",
                    "$ref": "#/definitions/positiveInt"
                },
                "data": {
                    "description": "A series of data points which are decimal values separated by a single space (character u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) can also be used in place of a decimal value.",
                    "$ref": "#/definitions/string"
                }
            },
            "additionalProperties": false,
            "required": [
                "origin"
            ]
        },
        "Timing": {
            "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "event": {
                    "description": "Identifies specific times when the event occurs.",
                    "items": {
                        "$ref": "#/definitions/dateTime"
                    },
                    "type": "array"
                },
                "repeat": {
                    "description": "A set of rules that describe when the event is scheduled.",
                    "$ref": "#/definitions/Timing_Repeat"
                },
                "code": {
                    "description": "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
                    "$ref": "#/definitions/CodeableConcept"
                }
            },
            "additionalProperties": false
        },
        "Contributor": {
            "description": "A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of contributor.",
                    "enum": [
                        "author",
                        "editor",
                        "reviewer",
                        "endorser"
                    ]
                },
                "name": {
                    "description": "The name of the individual or organization responsible for the contribution.",
                    "$ref": "#/definitions/string"
                },
                "contact": {
                    "description": "Contact details to assist a user in finding and communicating with the contributor.",
                    "items": {
                        "$ref": "#/definitions/ContactDetail"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false
        },
        "DataRequirement": {
            "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
                    "$ref": "#/definitions/code"
                },
                "profile": {
                    "description": "The profile of the required data, specified as the uri of the profile definition.",
                    "items": {
                        "$ref": "#/definitions/canonical"
                    },
                    "type": "array"
                },
                "subjectCodeableConcept": {
                    "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "subjectReference": {
                    "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
                    "$ref": "#/definitions/Reference"
                },
                "mustSupport": {
                    "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
                    "items": {
                        "$ref": "#/definitions/string"
                    },
                    "type": "array"
                },
                "codeFilter": {
                    "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
                    "items": {
                        "$ref": "#/definitions/DataRequirement_CodeFilter"
                    },
                    "type": "array"
                },
                "dateFilter": {
                    "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
                    "items": {
                        "$ref": "#/definitions/DataRequirement_DateFilter"
                    },
                    "type": "array"
                },
                "limit": {
                    "description": "Specifies a maximum number of results that are required (uses the _count search parameter).",
                    "$ref": "#/definitions/positiveInt"
                },
                "sort": {
                    "description": "Specifies the order of the results to be returned.",
                    "items": {
                        "$ref": "#/definitions/DataRequirement_Sort"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false
        },
        "Expression": {
            "description": "A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "A brief, natural language description of the condition that effectively communicates the intended semantics.",
                    "$ref": "#/definitions/string"
                },
                "name": {
                    "description": "A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.",
                    "$ref": "#/definitions/id"
                },
                "language": {
                    "description": "The media type of the language for the expression.",
                    "enum": [
                        "text/cql",
                        "text/fhirpath",
                        "application/x-fhir-query"
                    ]
                },
                "expression": {
                    "description": "An expression in the specified language that returns a value.",
                    "$ref": "#/definitions/string"
                },
                "reference": {
                    "description": "A URI that defines where the expression is found.",
                    "$ref": "#/definitions/uri"
                }
            },
            "additionalProperties": false
        },
        "ParameterDefinition": {
            "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The name of the parameter used to allow access to the value of the parameter in evaluation contexts.",
                    "$ref": "#/definitions/code"
                },
                "use": {
                    "description": "Whether the parameter is input or output for the module.",
                    "$ref": "#/definitions/code"
                },
                "min": {
                    "description": "The minimum number of times this parameter SHALL appear in the request or response.",
                    "$ref": "#/definitions/integer"
                },
                "max": {
                    "description": "The maximum number of times this element is permitted to appear in the request or response.",
                    "$ref": "#/definitions/string"
                },
                "documentation": {
                    "description": "A brief discussion of what the parameter is for and how it is used by the module.",
                    "$ref": "#/definitions/string"
                },
                "type": {
                    "description": "The type of the parameter.",
                    "$ref": "#/definitions/code"
                },
                "profile": {
                    "description": "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.",
                    "$ref": "#/definitions/canonical"
                }
            },
            "additionalProperties": false
        },
        "RelatedArtifact": {
            "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of relationship to the related artifact.",
                    "enum": [
                        "documentation",
                        "justification",
                        "citation",
                        "predecessor",
                        "successor",
                        "derived-from",
                        "depends-on",
                        "composed-of"
                    ]
                },
                "label": {
                    "description": "A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.",
                    "$ref": "#/definitions/string"
                },
                "display": {
                    "description": "A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.",
                    "$ref": "#/definitions/string"
                },
                "citation": {
                    "description": "A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.",
                    "$ref": "#/definitions/markdown"
                },
                "url": {
                    "description": "A url for the artifact that can be followed to access the actual content.",
                    "$ref": "#/definitions/url"
                },
                "document": {
                    "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element.",
                    "$ref": "#/definitions/Attachment"
                },
                "resource": {
                    "description": "The related resource, such as a library, value set, profile, or other knowledge resource.",
                    "$ref": "#/definitions/canonical"
                }
            },
            "additionalProperties": false
        },
        "TriggerDefinition": {
            "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The type of triggering event.",
                    "enum": [
                        "named-event",
                        "periodic",
                        "data-changed",
                        "data-added",
                        "data-modified",
                        "data-removed",
                        "data-accessed",
                        "data-access-ended"
                    ]
                },
                "name": {
                    "description": "A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.",
                    "$ref": "#/definitions/string"
                },
                "timingTiming": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "$ref": "#/definitions/Timing"
                },
                "timingReference": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "$ref": "#/definitions/Reference"
                },
                "timingDate": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "timingDateTime": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "data": {
                    "description": "The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.",
                    "items": {
                        "$ref": "#/definitions/DataRequirement"
                    },
                    "type": "array"
                },
                "condition": {
                    "description": "A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.",
                    "$ref": "#/definitions/Expression"
                }
            },
            "additionalProperties": false
        },
        "Dosage": {
            "description": "Indicates how the medication is/was taken or should be taken by the patient.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "sequence": {
                    "description": "Indicates the order in which the dosage instructions should be applied or interpreted.",
                    "$ref": "#/definitions/integer"
                },
                "text": {
                    "description": "Free text dosage instructions e.g. SIG.",
                    "$ref": "#/definitions/string"
                },
                "additionalInstruction": {
                    "description": "Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\").",
                    "items": {
                        "$ref": "#/definitions/CodeableConcept"
                    },
                    "type": "array"
                },
                "patientInstruction": {
                    "description": "Instructions in terms that are understood by the patient or consumer.",
                    "$ref": "#/definitions/string"
                },
                "timing": {
                    "description": "When medication should be administered.",
                    "$ref": "#/definitions/Timing"
                },
                "asNeededBoolean": {
                    "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
                    "pattern": "^true|false$",
                    "type": "boolean"
                },
                "asNeededCodeableConcept": {
                    "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "site": {
                    "description": "Body site to administer to.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "route": {
                    "description": "How drug should enter body.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "method": {
                    "description": "Technique for administering medication.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "doseAndRate": {
                    "description": "The amount of medication administered.",
                    "items": {
                        "$ref": "#/definitions/Dosage_DoseAndRate"
                    },
                    "type": "array"
                },
                "maxDosePerPeriod": {
                    "description": "Upper limit on medication per unit of time.",
                    "$ref": "#/definitions/Ratio"
                },
                "maxDosePerAdministration": {
                    "description": "Upper limit on medication per administration.",
                    "$ref": "#/definitions/Quantity"
                },
                "maxDosePerLifetime": {
                    "description": "Upper limit on medication per lifetime of the patient.",
                    "$ref": "#/definitions/Quantity"
                }
            },
            "additionalProperties": false
        },
        "ElementDefinition_Example": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "label": {
                    "description": "Describes the purpose of this example amoung the set of examples.",
                    "$ref": "#/definitions/string"
                },
                "valueBase64Binary": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                    "type": "string"
                },
                "valueBoolean": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^true|false$",
                    "type": "boolean"
                },
                "valueCanonical": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "valueCode": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                },
                "valueDate": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                },
                "valueDateTime": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "valueDecimal": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                },
                "valueId": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                    "type": "string"
                },
                "valueInstant": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                },
                "valueInteger": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                },
                "valueMarkdown": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "valueOid": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                    "type": "string"
                },
                "valuePositiveInt": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                },
                "valueString": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                },
                "valueTime": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                    "type": "string"
                },
                "valueUnsignedInt": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                },
                "valueUri": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "valueUrl": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^\\S*$",
                    "type": "string"
                },
                "valueUuid": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "type": "string"
                },
                "valueAddress": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Address"
                },
                "valueAge": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Age"
                },
                "valueAnnotation": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Annotation"
                },
                "valueAttachment": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Attachment"
                },
                "valueCodeableConcept": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "valueCoding": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Coding"
                },
                "valueContactPoint": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/ContactPoint"
                },
                "valueCount": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Count"
                },
                "valueDistance": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Distance"
                },
                "valueDuration": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Duration"
                },
                "valueHumanName": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/HumanName"
                },
                "valueIdentifier": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Identifier"
                },
                "valueMoney": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Money"
                },
                "valuePeriod": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Period"
                },
                "valueQuantity": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Quantity"
                },
                "valueRange": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Range"
                },
                "valueRatio": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Ratio"
                },
                "valueReference": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Reference"
                },
                "valueSampledData": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/SampledData"
                },
                "valueSignature": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Signature"
                },
                "valueTiming": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Timing"
                },
                "valueContactDetail": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/ContactDetail"
                },
                "valueContributor": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Contributor"
                },
                "valueDataRequirement": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/DataRequirement"
                },
                "valueExpression": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Expression"
                },
                "valueParameterDefinition": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/ParameterDefinition"
                },
                "valueRelatedArtifact": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/RelatedArtifact"
                },
                "valueTriggerDefinition": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/TriggerDefinition"
                },
                "valueUsageContext": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/UsageContext"
                },
                "valueDosage": {
                    "description": "The actual value for the element, which must be one of the types allowed for this element.",
                    "$ref": "#/definitions/Dosage"
                }
            },
            "additionalProperties": false
        },
        "integer": {
            "pattern": "^-?([0]|([1-9][0-9]*))$",
            "type": "number",
            "description": "A whole number"
        },
        "ElementDefinition_Constraint": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "key": {
                    "description": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
                    "$ref": "#/definitions/id"
                },
                "requirements": {
                    "description": "Description of why this constraint is necessary or appropriate.",
                    "$ref": "#/definitions/string"
                },
                "severity": {
                    "description": "Identifies the impact constraint violation has on the conformance of the instance.",
                    "enum": [
                        "error",
                        "warning"
                    ]
                },
                "human": {
                    "description": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
                    "$ref": "#/definitions/string"
                },
                "expression": {
                    "description": "A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.",
                    "$ref": "#/definitions/string"
                },
                "xpath": {
                    "description": "An XPath expression of constraint that can be executed to see if this constraint is met.",
                    "$ref": "#/definitions/string"
                },
                "source": {
                    "description": "A reference to the original source of the constraint, for traceability purposes.",
                    "$ref": "#/definitions/canonical"
                }
            },
            "additionalProperties": false
        },
        "ElementDefinition_Binding": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "strength": {
                    "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
                    "enum": [
                        "required",
                        "extensible",
                        "preferred",
                        "example"
                    ]
                },
                "description": {
                    "description": "Describes the intended use of this particular set of codes.",
                    "$ref": "#/definitions/string"
                },
                "valueSet": {
                    "description": "Refers to the value set that identifies the set of codes the binding refers to.",
                    "$ref": "#/definitions/canonical"
                }
            },
            "additionalProperties": false
        },
        "ElementDefinition_Mapping": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "identity": {
                    "description": "An internal reference to the definition of a mapping.",
                    "$ref": "#/definitions/id"
                },
                "language": {
                    "description": "Identifies the computable language in which mapping.map is expressed.",
                    "$ref": "#/definitions/code"
                },
                "map": {
                    "description": "Expresses what part of the target specification corresponds to this element.",
                    "$ref": "#/definitions/string"
                },
                "comment": {
                    "description": "Comments that provide information about the mapping or its use.",
                    "$ref": "#/definitions/string"
                }
            },
            "additionalProperties": false
        },
        "ElementDefinition_Discriminator": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "How the element value is interpreted when discrimination is evaluated.",
                    "enum": [
                        "value",
                        "exists",
                        "pattern",
                        "type",
                        "profile"
                    ]
                },
                "_type": {
                    "description": "Extensions for type",
                    "$ref": "#/definitions/Element"
                },
                "path": {
                    "description": "A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.",
                    "$ref": "#/definitions/string"
                },
                "_path": {
                    "description": "Extensions for path",
                    "$ref": "#/definitions/Element"
                }
            },
            "additionalProperties": false
        },
        "url": {
            "pattern": "^\\S*$",
            "type": "string",
            "description": "A URI that is a literal reference"
        },
        "Timing_Repeat": {
            "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "boundsDuration": {
                    "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
                    "$ref": "#/definitions/Duration"
                },
                "boundsRange": {
                    "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
                    "$ref": "#/definitions/Range"
                },
                "boundsPeriod": {
                    "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
                    "$ref": "#/definitions/Period"
                },
                "count": {
                    "description": "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.",
                    "$ref": "#/definitions/positiveInt"
                },
                "_count": {
                    "description": "Extensions for count",
                    "$ref": "#/definitions/Element"
                },
                "countMax": {
                    "description": "If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.",
                    "$ref": "#/definitions/positiveInt"
                },
                "_countMax": {
                    "description": "Extensions for countMax",
                    "$ref": "#/definitions/Element"
                },
                "duration": {
                    "description": "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.",
                    "$ref": "#/definitions/decimal"
                },
                "_duration": {
                    "description": "Extensions for duration",
                    "$ref": "#/definitions/Element"
                },
                "durationMax": {
                    "description": "If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.",
                    "$ref": "#/definitions/decimal"
                },
                "_durationMax": {
                    "description": "Extensions for durationMax",
                    "$ref": "#/definitions/Element"
                },
                "durationUnit": {
                    "description": "The units of time for the duration, in UCUM units.",
                    "enum": [
                        "s",
                        "min",
                        "h",
                        "d",
                        "wk",
                        "mo",
                        "a"
                    ]
                },
                "_durationUnit": {
                    "description": "Extensions for durationUnit",
                    "$ref": "#/definitions/Element"
                },
                "frequency": {
                    "description": "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.",
                    "$ref": "#/definitions/positiveInt"
                },
                "_frequency": {
                    "description": "Extensions for frequency",
                    "$ref": "#/definitions/Element"
                },
                "frequencyMax": {
                    "description": "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
                    "$ref": "#/definitions/positiveInt"
                },
                "_frequencyMax": {
                    "description": "Extensions for frequencyMax",
                    "$ref": "#/definitions/Element"
                },
                "period": {
                    "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.",
                    "$ref": "#/definitions/decimal"
                },
                "_period": {
                    "description": "Extensions for period",
                    "$ref": "#/definitions/Element"
                },
                "periodMax": {
                    "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
                    "$ref": "#/definitions/decimal"
                },
                "_periodMax": {
                    "description": "Extensions for periodMax",
                    "$ref": "#/definitions/Element"
                },
                "periodUnit": {
                    "description": "The units of time for the period in UCUM units.",
                    "enum": [
                        "s",
                        "min",
                        "h",
                        "d",
                        "wk",
                        "mo",
                        "a"
                    ]
                },
                "_periodUnit": {
                    "description": "Extensions for periodUnit",
                    "$ref": "#/definitions/Element"
                },
                "dayOfWeek": {
                    "description": "If one or more days of week is provided, then the action happens only on the specified day(s).",
                    "items": {
                        "$ref": "#/definitions/code"
                    },
                    "type": "array"
                },
                "_dayOfWeek": {
                    "description": "Extensions for dayOfWeek",
                    "items": {
                        "$ref": "#/definitions/Element"
                    },
                    "type": "array"
                },
                "timeOfDay": {
                    "description": "Specified time of day for action to take place.",
                    "items": {
                        "$ref": "#/definitions/time"
                    },
                    "type": "array"
                },
                "_timeOfDay": {
                    "description": "Extensions for timeOfDay",
                    "items": {
                        "$ref": "#/definitions/Element"
                    },
                    "type": "array"
                },
                "when": {
                    "description": "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.",
                    "items": {
                        "enum": [
                            "MORN",
                            "MORN.early",
                            "MORN.late",
                            "NOON",
                            "AFT",
                            "AFT.early",
                            "AFT.late",
                            "EVE",
                            "EVE.early",
                            "EVE.late",
                            "NIGHT",
                            "PHS",
                            "HS",
                            "WAKE",
                            "C",
                            "CM",
                            "CD",
                            "CV",
                            "AC",
                            "ACM",
                            "ACD",
                            "ACV",
                            "PC",
                            "PCM",
                            "PCD",
                            "PCV"
                        ]
                    },
                    "type": "array"
                },
                "_when": {
                    "description": "Extensions for when",
                    "items": {
                        "$ref": "#/definitions/Element"
                    },
                    "type": "array"
                },
                "offset": {
                    "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
                    "$ref": "#/definitions/unsignedInt"
                },
                "_offset": {
                    "description": "Extensions for offset",
                    "$ref": "#/definitions/Element"
                }
            },
            "additionalProperties": false
        },
        "DataRequirement_CodeFilter": {
            "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
                    "$ref": "#/definitions/string"
                },
                "_path": {
                    "description": "Extensions for path",
                    "$ref": "#/definitions/Element"
                },
                "searchParam": {
                    "description": "A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.",
                    "$ref": "#/definitions/string"
                },
                "_searchParam": {
                    "description": "Extensions for searchParam",
                    "$ref": "#/definitions/Element"
                },
                "valueSet": {
                    "description": "The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
                    "$ref": "#/definitions/canonical"
                },
                "code": {
                    "description": "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
                    "items": {
                        "$ref": "#/definitions/Coding"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false
        },
        "DataRequirement_DateFilter": {
            "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.",
                    "$ref": "#/definitions/string"
                },
                "_path": {
                    "description": "Extensions for path",
                    "$ref": "#/definitions/Element"
                },
                "searchParam": {
                    "description": "A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.",
                    "$ref": "#/definitions/string"
                },
                "_searchParam": {
                    "description": "Extensions for searchParam",
                    "$ref": "#/definitions/Element"
                },
                "valueDateTime": {
                    "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                },
                "_valueDateTime": {
                    "description": "Extensions for valueDateTime",
                    "$ref": "#/definitions/Element"
                },
                "valuePeriod": {
                    "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
                    "$ref": "#/definitions/Period"
                },
                "valueDuration": {
                    "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
                    "$ref": "#/definitions/Duration"
                }
            },
            "additionalProperties": false
        },
        "DataRequirement_Sort": {
            "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.",
                    "$ref": "#/definitions/string"
                },
                "_path": {
                    "description": "Extensions for path",
                    "$ref": "#/definitions/Element"
                },
                "direction": {
                    "description": "The direction of the sort, ascending or descending.",
                    "enum": [
                        "ascending",
                        "descending"
                    ]
                },
                "_direction": {
                    "description": "Extensions for direction",
                    "$ref": "#/definitions/Element"
                }
            },
            "additionalProperties": false
        },
        "Dosage_DoseAndRate": {
            "description": "Indicates how the medication is/was taken or should be taken by the patient.",
            "properties": {
                "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "$ref": "#/definitions/string"
                },
                "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "items": {
                        "$ref": "#/definitions/Extension"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The kind of dose or rate specified, for example, ordered or calculated.",
                    "$ref": "#/definitions/CodeableConcept"
                },
                "doseRange": {
                    "description": "Amount of medication per dose.",
                    "$ref": "#/definitions/Range"
                },
                "doseQuantity": {
                    "description": "Amount of medication per dose.",
                    "$ref": "#/definitions/Quantity"
                },
                "rateRatio": {
                    "description": "Amount of medication per unit of time.",
                    "$ref": "#/definitions/Ratio"
                },
                "rateRange": {
                    "description": "Amount of medication per unit of time.",
                    "$ref": "#/definitions/Range"
                },
                "rateQuantity": {
                    "description": "Amount of medication per unit of time.",
                    "$ref": "#/definitions/Quantity"
                }
            },
            "additionalProperties": false
        }
    },
    "host": "hapi.fhir.org",
    "basePath": "/",
    "info": {
        "title": "StructureDefinitionFHIRAPI",
        "version": "4.0",
        "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types."
    },
    "paths": {
        "/StructureDefinition": {
            "post": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Create StructureDefinition",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/StructureDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StructureDefinition"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Get StructureDefinition",
                "parameters": [
                    {
                        "name": "_text",
                        "in": "query",
                        "type": "string",
                        "description": "Search on the narrative of the resource"
                    },
                    {
                        "name": "_content",
                        "in": "query",
                        "type": "string",
                        "description": "Search on the entire content of the resource"
                    },
                    {
                        "name": "_id",
                        "in": "query",
                        "type": "string",
                        "description": "Logical id of this artifact"
                    },
                    {
                        "name": "_lastUpdated",
                        "in": "query",
                        "type": "string",
                        "description": "When the resource version last changed"
                    },
                    {
                        "name": "_profile",
                        "in": "query",
                        "type": "string",
                        "description": "Profiles this resource claims to conform to"
                    },
                    {
                        "name": "_query",
                        "in": "query",
                        "type": "string",
                        "description": "A custom search profile that describes a specific defined query operation"
                    },
                    {
                        "name": "_security",
                        "in": "query",
                        "type": "string",
                        "description": "Security Labels applied to this resource"
                    },
                    {
                        "name": "_source",
                        "in": "query",
                        "type": "string",
                        "description": "Identifies where the resource comes from"
                    },
                    {
                        "name": "_tag",
                        "in": "query",
                        "type": "string",
                        "description": "Tags applied to this resource"
                    },
                    {
                        "name": "context",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement\r\n* [CodeSystem](codesystem.html): A use context assigned to the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition\r\n* [ConceptMap](conceptmap.html): A use context assigned to the concept map\r\n* [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition\r\n* [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide\r\n* [MessageDefinition](messagedefinition.html): A use context assigned to the message definition\r\n* [NamingSystem](namingsystem.html): A use context assigned to the naming system\r\n* [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition\r\n* [SearchParameter](searchparameter.html): A use context assigned to the search parameter\r\n* [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition\r\n* [StructureMap](structuremap.html): A use context assigned to the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities\r\n* [ValueSet](valueset.html): A use context assigned to the value set\r\n"
                    },
                    {
                        "name": "context-quantity",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement\r\n* [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition\r\n* [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map\r\n* [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition\r\n* [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide\r\n* [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition\r\n* [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system\r\n* [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition\r\n* [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter\r\n* [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition\r\n* [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities\r\n* [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set\r\n"
                    },
                    {
                        "name": "context-type",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement\r\n* [CodeSystem](codesystem.html): A type of use context assigned to the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition\r\n* [ConceptMap](conceptmap.html): A type of use context assigned to the concept map\r\n* [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition\r\n* [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide\r\n* [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition\r\n* [NamingSystem](namingsystem.html): A type of use context assigned to the naming system\r\n* [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition\r\n* [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter\r\n* [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition\r\n* [StructureMap](structuremap.html): A type of use context assigned to the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities\r\n* [ValueSet](valueset.html): A type of use context assigned to the value set\r\n"
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): The capability statement publication date\r\n* [CodeSystem](codesystem.html): The code system publication date\r\n* [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date\r\n* [ConceptMap](conceptmap.html): The concept map publication date\r\n* [GraphDefinition](graphdefinition.html): The graph definition publication date\r\n* [ImplementationGuide](implementationguide.html): The implementation guide publication date\r\n* [MessageDefinition](messagedefinition.html): The message definition publication date\r\n* [NamingSystem](namingsystem.html): The naming system publication date\r\n* [OperationDefinition](operationdefinition.html): The operation definition publication date\r\n* [SearchParameter](searchparameter.html): The search parameter publication date\r\n* [StructureDefinition](structuredefinition.html): The structure definition publication date\r\n* [StructureMap](structuremap.html): The structure map publication date\r\n* [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date\r\n* [ValueSet](valueset.html): The value set publication date\r\n"
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): The description of the capability statement\r\n* [CodeSystem](codesystem.html): The description of the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition\r\n* [ConceptMap](conceptmap.html): The description of the concept map\r\n* [GraphDefinition](graphdefinition.html): The description of the graph definition\r\n* [ImplementationGuide](implementationguide.html): The description of the implementation guide\r\n* [MessageDefinition](messagedefinition.html): The description of the message definition\r\n* [NamingSystem](namingsystem.html): The description of the naming system\r\n* [OperationDefinition](operationdefinition.html): The description of the operation definition\r\n* [SearchParameter](searchparameter.html): The description of the search parameter\r\n* [StructureDefinition](structuredefinition.html): The description of the structure definition\r\n* [StructureMap](structuremap.html): The description of the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities\r\n* [ValueSet](valueset.html): The description of the value set\r\n"
                    },
                    {
                        "name": "jurisdiction",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement\r\n* [CodeSystem](codesystem.html): Intended jurisdiction for the code system\r\n* [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map\r\n* [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition\r\n* [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide\r\n* [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition\r\n* [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system\r\n* [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition\r\n* [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter\r\n* [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition\r\n* [StructureMap](structuremap.html): Intended jurisdiction for the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities\r\n* [ValueSet](valueset.html): Intended jurisdiction for the value set\r\n"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement\r\n* [CodeSystem](codesystem.html): Computationally friendly name of the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition\r\n* [ConceptMap](conceptmap.html): Computationally friendly name of the concept map\r\n* [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition\r\n* [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide\r\n* [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition\r\n* [NamingSystem](namingsystem.html): Computationally friendly name of the naming system\r\n* [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition\r\n* [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter\r\n* [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition\r\n* [StructureMap](structuremap.html): Computationally friendly name of the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities\r\n* [ValueSet](valueset.html): Computationally friendly name of the value set\r\n"
                    },
                    {
                        "name": "publisher",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement\r\n* [CodeSystem](codesystem.html): Name of the publisher of the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition\r\n* [ConceptMap](conceptmap.html): Name of the publisher of the concept map\r\n* [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition\r\n* [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide\r\n* [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition\r\n* [NamingSystem](namingsystem.html): Name of the publisher of the naming system\r\n* [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition\r\n* [SearchParameter](searchparameter.html): Name of the publisher of the search parameter\r\n* [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition\r\n* [StructureMap](structuremap.html): Name of the publisher of the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities\r\n* [ValueSet](valueset.html): Name of the publisher of the value set\r\n"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): The current status of the capability statement\r\n* [CodeSystem](codesystem.html): The current status of the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition\r\n* [ConceptMap](conceptmap.html): The current status of the concept map\r\n* [GraphDefinition](graphdefinition.html): The current status of the graph definition\r\n* [ImplementationGuide](implementationguide.html): The current status of the implementation guide\r\n* [MessageDefinition](messagedefinition.html): The current status of the message definition\r\n* [NamingSystem](namingsystem.html): The current status of the naming system\r\n* [OperationDefinition](operationdefinition.html): The current status of the operation definition\r\n* [SearchParameter](searchparameter.html): The current status of the search parameter\r\n* [StructureDefinition](structuredefinition.html): The current status of the structure definition\r\n* [StructureMap](structuremap.html): The current status of the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities\r\n* [ValueSet](valueset.html): The current status of the value set\r\n"
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement\r\n* [CodeSystem](codesystem.html): The human-friendly name of the code system\r\n* [ConceptMap](conceptmap.html): The human-friendly name of the concept map\r\n* [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide\r\n* [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition\r\n* [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition\r\n* [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition\r\n* [StructureMap](structuremap.html): The human-friendly name of the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities\r\n* [ValueSet](valueset.html): The human-friendly name of the value set\r\n"
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement\r\n* [CodeSystem](codesystem.html): The uri that identifies the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition\r\n* [ConceptMap](conceptmap.html): The uri that identifies the concept map\r\n* [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition\r\n* [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide\r\n* [MessageDefinition](messagedefinition.html): The uri that identifies the message definition\r\n* [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition\r\n* [SearchParameter](searchparameter.html): The uri that identifies the search parameter\r\n* [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition\r\n* [StructureMap](structuremap.html): The uri that identifies the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities\r\n* [ValueSet](valueset.html): The uri that identifies the value set\r\n"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): The business version of the capability statement\r\n* [CodeSystem](codesystem.html): The business version of the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition\r\n* [ConceptMap](conceptmap.html): The business version of the concept map\r\n* [GraphDefinition](graphdefinition.html): The business version of the graph definition\r\n* [ImplementationGuide](implementationguide.html): The business version of the implementation guide\r\n* [MessageDefinition](messagedefinition.html): The business version of the message definition\r\n* [OperationDefinition](operationdefinition.html): The business version of the operation definition\r\n* [SearchParameter](searchparameter.html): The business version of the search parameter\r\n* [StructureDefinition](structuredefinition.html): The business version of the structure definition\r\n* [StructureMap](structuremap.html): The business version of the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities\r\n* [ValueSet](valueset.html): The business version of the value set\r\n"
                    },
                    {
                        "name": "context-type-quantity",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement\r\n* [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition\r\n* [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map\r\n* [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition\r\n* [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide\r\n* [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition\r\n* [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system\r\n* [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition\r\n* [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter\r\n* [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition\r\n* [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities\r\n* [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set\r\n"
                    },
                    {
                        "name": "context-type-value",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement\r\n* [CodeSystem](codesystem.html): A use context type and value assigned to the code system\r\n* [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition\r\n* [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map\r\n* [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition\r\n* [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide\r\n* [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition\r\n* [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system\r\n* [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition\r\n* [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter\r\n* [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition\r\n* [StructureMap](structuremap.html): A use context type and value assigned to the structure map\r\n* [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities\r\n* [ValueSet](valueset.html): A use context type and value assigned to the value set\r\n"
                    },
                    {
                        "name": "identifier",
                        "in": "query",
                        "type": "string",
                        "description": "Multiple Resources: \r\n\r\n* [CodeSystem](codesystem.html): External identifier for the code system\r\n* [ConceptMap](conceptmap.html): External identifier for the concept map\r\n* [MessageDefinition](messagedefinition.html): External identifier for the message definition\r\n* [StructureDefinition](structuredefinition.html): External identifier for the structure definition\r\n* [StructureMap](structuremap.html): External identifier for the structure map\r\n* [ValueSet](valueset.html): External identifier for the value set\r\n"
                    },
                    {
                        "name": "abstract",
                        "in": "query",
                        "type": "string",
                        "description": "Whether the structure is abstract"
                    },
                    {
                        "name": "base",
                        "in": "query",
                        "type": "string",
                        "description": "Definition that this type is constrained/specialized from"
                    },
                    {
                        "name": "base-path",
                        "in": "query",
                        "type": "string",
                        "description": "Path that identifies the base element"
                    },
                    {
                        "name": "derivation",
                        "in": "query",
                        "type": "string",
                        "description": "specialization | constraint - How relates to base definition"
                    },
                    {
                        "name": "experimental",
                        "in": "query",
                        "type": "string",
                        "description": "For testing purposes, not real usage"
                    },
                    {
                        "name": "ext-context",
                        "in": "query",
                        "type": "string",
                        "description": "The system is the URL for the context-type: e.g. http://hl7.org/fhir/extension-context-type#element|CodeableConcept.text"
                    },
                    {
                        "name": "keyword",
                        "in": "query",
                        "type": "string",
                        "description": "A code for the StructureDefinition"
                    },
                    {
                        "name": "kind",
                        "in": "query",
                        "type": "string",
                        "description": "primitive-type | complex-type | resource | logical"
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "type": "string",
                        "description": "A path that is constrained in the StructureDefinition"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "Type defined or constrained by this structure"
                    },
                    {
                        "name": "valueset",
                        "in": "query",
                        "type": "string",
                        "description": "A vocabulary binding reference"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Bundle"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            }
        },
        "/StructureDefinition/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "type": "string",
                    "required": true
                }
            ],
            "get": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Retrieve StructureDefinition by ID",
                "description": "Retrieve StructureDefinition by providing ID",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StructureDefinition"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Update StructureDefinition",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/StructureDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StructureDefinition"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Remove StructureDefinition by ID",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            }
        },
        "/StructureDefinition/_history": {
            "get": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Retrive StructureDefinition History",
                "description": "Retrieve StructureDefinition History",
                "parameters": [
                    {
                        "name": "_since",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "_count",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Bundle"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            }
        },
        "/StructureDefinition/{id}/_history": {
            "get": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Retrive StructureDefinition History by ID",
                "description": "Retrieve StructureDefinition History by providing ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "_since",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "_count",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Bundle"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            }
        },
        "/StructureDefinition/{id}/_history/{vid}": {
            "get": {
                "tags": [
                    "StructureDefinition"
                ],
                "summary": "Retrive StructureDefinition History by ID and Version",
                "description": "Retrieve StructureDefinition History by providing ID and version",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "vid",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StructureDefinition"
                        }
                    },
                    "400": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/OperationOutcome"
                        }
                    }
                }
            }
        }
    },
    "produces": [
        "text/plain",
        "application/json",
        "application/fhir+json",
        "application/json+fhir",
        "text/json",
        "application/xml",
        "application/fhir+xml",
        "application/xml+fhir",
        "text/xml",
        "text/xml+fhir",
        "application/octet-stream"
    ],
    "securityDefinitions": {
        "Bearer": {
            "name": "Authorization",
            "in": "header",
            "type": "apiKey",
            "description": "Authorization header using the Bearer scheme. Example :: 'Authorization: Bearer {token}'"
        }
    },
    "security": [
        {
            "Bearer": []
        }
    ]
}